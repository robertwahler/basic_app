#!/usr/bin/env ruby

require 'basic_app'
require 'optparse'
require 'term/ansicolor'
require 'fileutils'

available_actions = BasicApp::AVAILABLE_ACTIONS

banner = <<BANNER
TODO: application tag line

  Usage: basic_app [options]
BANNER
banner << "\nActions: #{available_actions.join(' ')}\n" unless available_actions.empty?

help = banner
help += <<HELP

Options:

HELP

options = {}
optparser = OptionParser.new do |opts|
  opts.banner = help

  opts.on("-T", "--tasks", "List tasks") do |t|
    options[:tasks] = t
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-c", "--[no-]coloring [MODE]", "--[no-]color [MODE]", "ANSI color in output. MODE=AUTO (default) or ALWAYS") do |c|
    options[:color] = c.nil? ? "AUTO" : c
    options[:color].upcase! if options[:color]
    unless [nil, false, "AUTO", "ALWAYS"].include?(options[:color])
      puts "basic_app, invalid color option: #{options[:color]}"
      exit 1
    end
  end

  opts.on("--[no-]config FILE", "Load configuration options from FILE") do |file|
    options[:config] = file
  end

  opts.on("--version", "Display current version") do
    puts "basic_app, version " + BasicApp.version
    exit 0
  end

  # no argument, shows at tail.  This will print an options summary.
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end

end

# first pass, process until the action/subcommand, errors will be raised for
# invalid options that occur before the action/subcommand
begin
  optparser.order!
rescue OptionParser::InvalidOption => e
  puts "basic_app #{e}"
  puts "basic_app --help for more information"
  exit 1
end


# second pass find all global options that may come after the action/subcommand
# and its args, no errors raised, validity will be checked by action parser
argv = []
while unknown_arg = ARGV.shift
  argv << unknown_arg
  begin
    optparser.order!
  rescue OptionParser::InvalidOption => e
    # put unknown args back on ARGV
    e.recover(ARGV)
  end
end

# configuration from config file, if it exists, will not overwrite command line
settings = BasicApp::Settings.new(FileUtils.pwd, options)
color = settings.options[:color]

# add summary of general options for use by action help commands
configuration = settings.to_hash
configuration[:general_options_summary] = optparser.summarize

if STDOUT.isatty || (color == 'ALWAYS')
  Term::ANSIColor::coloring = color

  if color && BasicApp::WINDOWS
    unless ENV['ANSICON']
      begin
        require 'Win32/Console/ANSI'
      rescue LoadError
        Term::ANSIColor::coloring = false
        STDERR.puts 'WARNING: You must "gem install win32console" (1.2.0 or higher) or use the ANSICON driver (https://github.com/adoxa/ansicon) to get color output on MRI/Windows'
      end
    end
  end

else
  Term::ANSIColor::coloring = false
end

BasicApp::App.new(argv, configuration).execute
